import streamlit as st
import requests

def analyze_stock_data(data, symbol, info):
    """
    Analyze stock data using OpenAI's GPT model and generate recommendations
    """
    current_price = info.get('currentPrice', 0) or info.get("open", 0)
    previous_close = info.get('previousClose', 0)
    price_change = ((current_price - previous_close) / previous_close) * 100 if previous_close else 0

    last_30_days = data.last('30D')
    avg_price = last_30_days['Close'].mean()
    max_price = last_30_days['Close'].max()
    min_price = last_30_days['Close'].min()
    volume_trend = "increasing" if last_30_days['Volume'].is_monotonic_increasing else "decreasing"

    prompt = f"""
    Analyze this stock market data for {symbol}:
    - Current Price: ${current_price:.2f}
    - Price Change: {price_change:.2f}%
    - 30-day Average Price: ${avg_price:.2f}
    - 30-day High: ${max_price:.2f}
    - 30-day Low: ${min_price:.2f}
    - Volume Trend: {volume_trend}
    - P/E Ratio: {info.get('trailingPE', 'N/A')}
    - Market Cap: ${info.get('marketCap', 0)/1e9:.2f}B
    - 52 Week High: ${info.get('fiftyTwoWeekHigh', 0):.2f}
    - 52 Week Low: ${info.get('fiftyTwoWeekLow', 0):.2f}

    Please provide:
    1. A brief technical analysis
    2. Key market indicators
    3. A short-term trading recommendation (6-12 months)
    4. A long-term trading recommendation (5-10 years)
    5. Risk factors to consider

    Format the response in clear sections with bullet points.
    Keep it concise and focused on actionable insights.
    """

    try:
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={st.secrets['GEMINI_API_KEY']}"
        headers = {"Content-Type": "application/json"}
        payload = {
            "system_instruction": {"parts": [{"text": "You are a professional stock market analyst. Provide clear, concise, and balanced analysis based on technical indicators. Always include risk warnings and avoid extreme predictions. Always remove markdown text formatting from the response."}]},
            "contents": [{"parts": [{"text": prompt}]}]
        }
        r = requests.post(url, headers=headers, json=payload)
        if r.status_code == 200:
            response = r.json()
            try:
                return response["candidates"][0]["content"]["parts"][0]["text"]
            except (KeyError, IndexError):
                return "Error: Unexpected response format from the API."
        else:
            return f"Error {r.status_code}: {r.text}"
    except Exception as ex:
        return f"Error: Unexpected response format from the API. {str(ex)}"

def format_recommendation(analysis):
    """
    Format the AI recommendation for display
    """
    if analysis:
        st.markdown("---")
        st.subheader("ü§ñ AI-Powered Analysis")
        st.markdown(analysis)
        st.info("‚ö†Ô∏è This analysis is generated by AI and should not be the sole basis for investment decisions. Always conduct your own research and consult with financial advisors.")
        st.markdown("---")